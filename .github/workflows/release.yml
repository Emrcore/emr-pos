name: Build & Release (Windows)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-win:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: apps/desktop

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Lockfile var mÄ± tespit et
      - name: Detect lockfile
        id: lock
        shell: bash
        run: |
          if [ -f apps/desktop/package-lock.json ]; then
            echo "path=apps/desktop/package-lock.json" >> "$GITHUB_OUTPUT"
          elif [ -f apps/desktop/npm-shrinkwrap.json ]; then
            echo "path=apps/desktop/npm-shrinkwrap.json" >> "$GITHUB_OUTPUT"
          elif [ -f apps/desktop/yarn.lock ]; then
            echo "path=apps/desktop/yarn.lock" >> "$GITHUB_OUTPUT"
          else
            echo "path=" >> "$GITHUB_OUTPUT"
          fi

      # Lockfile VARSA cache'li setup-node
      - name: Setup Node (cached)
        if: steps.lock.outputs.path != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.lock.outputs.path }}

      # Lockfile YOKSA cache'siz setup-node
      - name: Setup Node
        if: steps.lock.outputs.path == ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Kurulum: lockfile varsa npm ci, yoksa npm install
      - name: Install deps
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            npm ci || (rm -f package-lock.json && npm install)
          else
            npm install
          fi

      - name: Ensure ip-config.json exists
        shell: bash
        run: |
          mkdir -p electron
          [ -f electron/ip-config.json ] || echo '{}' > electron/ip-config.json

      - name: Build renderer
        run: npm run build:renderer

      - name: Package & Publish (electron-builder)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --win --publish always

      - name: Upload EXE artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emr-pos-windows-exe
          path: |
            release/*.exe
            release/*/*.exe
          if-no-files-found: warn
